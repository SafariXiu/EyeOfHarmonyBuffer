/*
 * Add your dependencies here. Supported configurations:
 *  - api("group:name:version:classifier"): if you use the types from this dependency in the public API of this mod
 *       Available at runtime and compiletime for mods depending on this mod
 *  - implementation("g:n:v:c"): if you need this for internal implementation details of the mod, but none of it is visible via the public API
 *       Available at runtime but not compiletime for mods depending on this mod
 *  - compileOnly("g:n:v:c"): if the mod you're building doesn't need this dependency during runtime at all, e.g. for optional mods
 *       Not available at all for mods depending on this mod, only visible at compiletime for this mod
 *  - compileOnlyApi("g:n:v:c"): like compileOnly, but also visible at compiletime for mods depending on this mod
 *       Available at compiletime but not runtime for mods depending on this mod
 *  - runtimeOnlyNonPublishable("g:n:v:c"): if you want to include a mod in this mod's runClient/runServer runs, but not publish it as a dependency
 *       Not available at all for mods depending on this mod, only visible at runtime for this mod
 * - testCONFIG("g:n:v:c") - replace CONFIG by one of the above (except api), same as above but for the test sources instead of main
 *
 *  - shadowImplementation("g:n:v:c"): effectively the same as API, but the dependency is included in your jar under a renamed package name
 *       Requires you to enable usesShadowedDependencies in gradle.properties
 *
 *  - compile("g:n:v:c"): deprecated, replace with "api" (works like the old "compile") or "implementation" (can be more efficient)
 *
 * You can exclude transitive dependencies (dependencies of the chosen dependency) by appending { transitive = false } if needed,
 * but use this sparingly as it can break using your mod as another mod's dependency if you're not careful.
 *
 * To depend on obfuscated jars you can use `devOnlyNonPublishable(rfg.deobf("dep:spec:1.2.3"))` to fetch an obfuscated jar from maven,
 * or `devOnlyNonPublishable(rfg.deobf(project.files("libs/my-mod-jar.jar")))` to use a file.
 *
 * Gradle names for some of the configuration can be misleading, compileOnlyApi and runtimeOnly both get published as dependencies in Maven, but compileOnly does not.
 * The buildscript adds runtimeOnlyNonPublishable to also have a runtime dependency that's not published.
 *
 * For more details, see https://docs.gradle.org/8.0.1/userguide/java_library_plugin.html#sec:java_library_configurations_graph - devOnlyNonPublishable("g:n:v:c"): a combination of runtimeOnlyNonPublishable and compileOnly for dependencies present at both compiletime and runtime,
 *       but not published as Maven dependencies - useful for RFG-deobfuscated dependencies or local testing
 *  - runtimeOnly("g:n:v:c"): if you don't need this at compile time, but want it to be present at runtime
 *       Available at runtime for mods depending on this mod
 *  - annotationProcessor("g:n:v:c"): mostly for java compiler plugins, if you know you need this, use it, otherwise don't worry
 *
 */

dependencies {
    api('com.github.GTNewHorizons:GT5-Unofficial:5.09.50.114:dev')
    implementation('org.apache.logging.log4j:log4j-api:2.17.0')
    implementation('org.apache.logging.log4j:log4j-core:2.17.0')
    implementation('com.github.GTNewHorizons:GTNH-Intergalactic:1.4.33:dev')
    implementation('com.github.GTNewHorizons:NewHorizonsCoreMod:2.6.95:dev')
    implementation("com.github.GTNewHorizons:NotEnoughItems:2.6.53-GTNH:dev")
    runtimeOnlyNonPublishable("com.github.GTNewHorizons:Chisel:2.15.5-GTNH:dev")
    runtimeOnlyNonPublishable("com.github.GTNewHorizons:StructureLib:1.3.6:dev")
    runtimeOnlyNonPublishable("com.github.GTNewHorizons:SGCraft:1.4.4-GTNH:dev")
    implementation("com.github.GTNewHorizons:Draconic-Evolution:1.3.14-GTNH:dev")
    implementation('com.github.GTNewHorizons:AE2FluidCraft-Rework:1.3.53-gtnh:dev')
    implementation('com.github.GTNewHorizons:Avaritia:1.58:dev')
    implementation('com.github.GTNewHorizons:Avaritiaddons:1.8.4-GTNH:dev')
    implementation('com.github.GTNewHorizons:Eternal-Singularity:1.2.1:dev')
    implementation('com.github.GTNewHorizons:Universal-Singularities:8.8.0:dev')
    implementation('com.github.GTNewHorizons:MagicBees:2.8.5-GTNH:dev')
    implementation('thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev')
    implementation('com.github.GTNewHorizons:ThaumicEnergistics:1.6.27-GTNH:dev')
    implementation('com.github.GTNewHorizons:Botania:1.11.7-GTNH:dev')
    implementation('com.github.GTNewHorizons:supersolarpanels:1.1.3:dev')
    implementation('com.github.GTNewHorizons:Electro-Magic-Tools:1.5.17:dev')
    implementation('com.github.GTNewHorizons:WitcheryExtras:1.2.3:dev')
    implementation('com.github.GTNewHorizons:BloodMagic:1.6.10:dev')
    implementation('com.github.GTNewHorizons:ForestryMC:4.9.21:dev')
    implementation('com.github.GTNewHorizons:EnderIO:2.8.24:dev')
    implementation('com.github.GTNewHorizons:MagicBees:2.8.5-GTNH:dev')
    implementation('com.github.GTNewHorizons:Binnie:2.4.7:dev')
    implementation('com.github.GTNewHorizons:OpenComputers:1.10.28-GTNH:dev')
    implementation('com.github.GTNewHorizons:ae2stuff:0.8.6-GTNH:dev')

    implementation rfg.deobf(files("libs/TwistSpaceTechnology-0.6.4.jar"))
    implementation rfg.deobf(files("libs/123Technology.2.0.2a.jar"))

    runtimeOnlyNonPublishable rfg.deobf(files("libs/ae2thing-v1.68.jar"))
    runtimeOnlyNonPublishable rfg.deobf(files("libs/nechar-GTNH 2.7.0.jar"))
    runtimeOnlyNonPublishable rfg.deobf(files("libs/WorldEditCuiFe-v1.0.7-mf-1.7.10-10.13.4.1566.jar"))
    runtimeOnlyNonPublishable rfg.deobf(files("libs/worldedit-v0.0.7.jar"))

    implementation('curse.maven:advsolar-362768:2885953')
    implementation('com.google.auto.value:auto-value-annotations:1.10.1')
    annotationProcessor('com.google.auto.value:auto-value:1.10.1')

    runtimeOnlyNonPublishable("com.github.GTNewHorizons:BlockRenderer6343:1.2.16:dev") { transitive = false }
}

configurations.all {
    exclude group: 'com.github.GTNewHorizons', module: 'Hodgepodge'
}
